package criterion.protocol;

message birth {
    optional int64 timestamp = 1;
}

message phase {

    enum kind {
        SETUP       = 1;
        MAIN        = 2;
        TEARDOWN    = 3;
        END         = 4;

        ABORT       = 5;
        TIMEOUT     = 6;
    }

    required kind phase = 1;
    required string name = 2;
    optional int64 timestamp = 3;
    optional string message = 4;
}

message death {
    enum result_type {
        NORMAL = 1;
        CRASH = 2;
    }

    required result_type result = 1;
    optional int64 status = 2;
    optional int64 timestamp = 3;
}

message assert {
    required string message = 1;
    required bool passed = 2;
    optional string file = 3;
    optional int64 line = 4;
}

message log {
    required int32 severity = 1;
    required string message = 2;
    optional int32 prefix = 3;
}

message ack {
    enum status {
        OK = 0;
        ERROR = 1;
    }

    required status status_code = 1;
    optional string message = 2;
}

message submessage {

    oneof value {
        criterion.protocol.birth        birth           = 1;
        criterion.protocol.phase        phase           = 2;
        criterion.protocol.death        death           = 3;

        criterion.protocol.log          message         = 4;
        criterion.protocol.assert       assert          = 5;
    }

}

message msg {

    required int32 version = 1 [default = 1];

    oneof id {
        int64 pid = 2;
    }

    required submessage data = 16;
}
